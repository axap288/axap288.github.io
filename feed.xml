<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IF-ELSE-THEN</title>
    <description>liunian is blog
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 15 Mar 2015 12:02:46 +0800</pubDate>
    <lastBuildDate>Sun, 15 Mar 2015 12:02:46 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>我所使用的加解密实现</title>
        <description>&lt;p&gt;在过往的开发过程中,肯定是离不了加密解密这一系列的操作的,
我所用到的多是基于OpenSSL库实现的RSA的非对称加密和3dES的对称算法,
但从最近使用过的一开发使用中发现在64位设备上会有空指针出现的问题而造成的崩溃,
已经严重影响到APP得正常运行,所以非常有必要整理一份新的加解密实现…….
幸运的是终于在GitHub上找到一套靠谱的算法实现—&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;先说说公私钥的生成:&lt;/h3&gt;

&lt;p&gt;通常我们在CS模式中用到的RSA对称加密,都需要在两端各保留一套公私钥:
我们可以通过keytool生成的一对秘钥,但是繁琐的命令不便于记忆实在麻烦,我这里有一个用java实现的密钥对方法,可以很快捷的生成.
代码如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.Security;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.text.DecimalFormat;

public class GeneralKeyPairs {

	public static String pubPath = &quot;keysUnreg/pub/&quot;;
	public static String priPath = &quot;keysUnreg/pri/&quot;;

	public static int count = 0;

	private static final DecimalFormat df = new DecimalFormat(&quot;0000000000&quot;);



	public static KeyPair generateKeyPair() throws Exception {
		KeyPairGenerator keyPairGen= null;    
		try {    
			keyPairGen= KeyPairGenerator.getInstance(&quot;RSA&quot;);    
		} catch (NoSuchAlgorithmException e) {    
			e.printStackTrace();    
		}    
		keyPairGen.initialize(1024, new SecureRandom());    
		KeyPair keyPair= keyPairGen.generateKeyPair();    
		return keyPair;
	}

	public static void saveX509PublicKey(String path, RSAPublicKey pubKey)
		throws Exception {
			FileOutputStream public_file_out = null;
			byte pub_key_bs[] = null;
			X509EncodedKeySpec spec = null;
			try{
				public_file_out = new FileOutputStream(path);
				pub_key_bs = pubKey.getEncoded();
				spec = new X509EncodedKeySpec(pub_key_bs);
				public_file_out.write(spec.getEncoded());
				public_file_out.close();
				public_file_out = null;
				spec = null;
				pub_key_bs = null;
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				if (null != public_file_out) {
					public_file_out.close();
					public_file_out = null;
				}
				spec = null;
				pub_key_bs = null;
			}
		}

	public static void savePKCS8PrivateKey(String path, RSAPrivateKey priKey)
		throws Exception {
			FileOutputStream private_file_out = null;
			byte pri_key_bs[] = null;
			PKCS8EncodedKeySpec spec = null;
			try{
				private_file_out = new FileOutputStream(path);
				pri_key_bs = priKey.getEncoded();
				spec = new PKCS8EncodedKeySpec(pri_key_bs);
				private_file_out.write(spec.getEncoded());
				private_file_out.close();
				private_file_out = null;
				spec = null;
				pri_key_bs = null;
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				if (null != private_file_out) {
					private_file_out.close();
					private_file_out = null;
				}
				spec = null;
				pri_key_bs = null;
			}
		}


	public static void saveKeyPairs_S(String filename) throws Exception{

		String filePub =  pubPath+filename+&quot;.pub&quot;;
		String filePri =  priPath+filename+&quot;.pri&quot;;

		File pubDir = new File(pubPath);
		pubDir.mkdirs();

		File priDir = new File(priPath);
		priDir.mkdirs();

		KeyPair keyPair = GeneralKeyPairs.generateKeyPair();
		RSAPublicKey pubKey = (RSAPublicKey) keyPair.getPublic();
		//        System.out.println(&quot;保存公钥:&quot;+filePub);
		GeneralKeyPairs.saveX509PublicKey(filePub,pubKey);
		RSAPrivateKey priKey = (RSAPrivateKey) keyPair.getPrivate();
		//        System.out.println(&quot;保存私钥:&quot;+filePri);
		GeneralKeyPairs.savePKCS8PrivateKey(filePri, priKey);
		count++;
	}
	public static void saveKeyPairs_P(String start,String end,String append) throws Exception{

		for(int i=Integer.parseInt(start);i&amp;lt;=Integer.parseInt(end);i++){
			saveKeyPairs_S(append+&quot;20140328&quot;+df.format(i));
		}

	}

	/**
	 * @param args
	 * args[0]  
	 *    -s : 生成1对密钥
	 *    -p : 批量生成密钥对
	 * args[1]
	 *    密钥存储文件名（args[0]=-s）
	 *    起始密钥名（args[0]=-p）
	 * args[2]
	 *    终止密钥名（args[0]=-p）
	 * args[3]   
	 *    密钥名头（args[0]=-p）
	 * args[4]
	 *    保存目录
	 * @throws Exception 
	 */

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub

		System.out.println(&quot;1：生成1对密钥  2：批量生成密钥:&quot;);
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

		String type = in.readLine();

		if(type.trim().equals(&quot;1&quot;)){
			System.out.println(&quot;生成1对密钥=&amp;gt;密钥名称:&quot;);
			in = new BufferedReader(new InputStreamReader(System.in));

			String filename = in.readLine();
			saveKeyPairs_S(filename);
		}else if(type.trim().equals(&quot;2&quot;)){
			System.out.println(&quot;批量生成密钥=&amp;gt;起始区间(int):&quot;);
			in = new BufferedReader(new InputStreamReader(System.in));
			String start = in.readLine();
			System.out.println(&quot;批量生成密钥=&amp;gt;终止区间(int):&quot;);
			in = new BufferedReader(new InputStreamReader(System.in));
			String end = in.readLine();
			System.out.println(&quot;批量生成密钥=&amp;gt;密钥名称头部:&quot;);
			in = new BufferedReader(new InputStreamReader(System.in));
			String head = in.readLine();

			saveKeyPairs_P(start,end,head);
		}
		System.out.println(&quot;成功生成密钥对儿&quot;+count+&quot;个，详情请见目录：&quot;+pubPath);
		//        if(args==null||args.length&amp;lt;2){
		//            System.out.println(&quot;输入参数有吴!&quot;);
		//        }else 
		//        if(args.length&amp;gt;=2){
		//            if(args.length==5){
		//                path = args[4];
		//            }
		//            if(args[0].equals(&quot;-s&quot;)){
		//                saveKeyPairs_S(args[1]);
		//            }
		//            if(args[0].equals(&quot;-p&quot;)){
		//                if(args.length&amp;gt;=4){
		//                    saveKeyPairs_P(args[1],args[2],args[3]);
		//                }else{
		//                    System.out.println(&quot;输入参数有吴!&quot;);
		//                }
		//            }
		//        }
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-1&quot;&gt;再说说如何在代码里使用公私钥:&lt;/h3&gt;
&lt;p&gt;在上面的代码中,公私钥是以文件的形式存在的(公钥:&lt;em&gt;.pub|私钥:&lt;/em&gt;.pri),如果为了编码方便或者不想把秘钥文件放到自己的APP中,
方法如下(java实现):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.BufferedReader;  
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;  
import java.io.InputStream;  
import java.io.InputStreamReader;  
import java.math.BigInteger;
import java.security.InvalidKeyException;  
import java.security.KeyFactory;  
import java.security.KeyPair;  
import java.security.KeyPairGenerator;  
import java.security.NoSuchAlgorithmException;  
import java.security.PublicKey;
import java.security.SecureRandom;  
import java.security.interfaces.RSAPrivateKey;  
import java.security.interfaces.RSAPublicKey;  
import java.security.spec.InvalidKeySpecException;  
import java.security.spec.PKCS8EncodedKeySpec;  
import java.security.spec.X509EncodedKeySpec;  
import javax.crypto.BadPaddingException;  
import javax.crypto.Cipher;  
import javax.crypto.IllegalBlockSizeException;  
import javax.crypto.NoSuchPaddingException;  
import sun.misc.BASE64Decoder;  
import sun.misc.BASE64Encoder;  

public class RSAEncrypt {  

	/*
	 * 从私钥文件中读取私钥信息
	 */
	public void readPKCS8PrivateKey(String path)
		throws Exception {
			FileInputStream private_file_in = null;
			byte pri_key_bs[] = null;
			RSAPrivateKey private_key = null;
			PKCS8EncodedKeySpec spec = null;
			KeyFactory kfac = null;
			try{
				private_file_in = new FileInputStream(path);
				pri_key_bs = new byte[1024];
				private_file_in.read(pri_key_bs);
				spec = new PKCS8EncodedKeySpec(pri_key_bs);
				kfac = KeyFactory.getInstance(&quot;RSA&quot;);//RSA/ECB/PKCS1Padding
				//KeyFactory kfac = KeyFactory.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;);
				private_key = (RSAPrivateKey) kfac.generatePrivate(spec);
				private_file_in.close();
				private_file_in = null;
				kfac = null;
				spec = null;
				pri_key_bs = null;
			} catch (Exception e) {

			} finally {
				if (null != private_file_in) {
					private_file_in.close();
					private_file_in = null;
				}
				kfac = null;
				spec = null;
				pri_key_bs = null;
			}
			this.privateKey = private_key;
		}


	/*
	 * 从公钥文件中读取公钥信息
	 */
	public RSAPublicKey readX509PublicKey(String path) throws Exception {
		FileInputStream public_file_in = null;
		byte pub_key_bs[] = null;
		X509EncodedKeySpec spec = null;
		KeyFactory kfac = null;
		RSAPublicKey public_key = null;
		try{
			public_file_in = new FileInputStream(path);
			pub_key_bs = new byte[1024];
			public_file_in.read(pub_key_bs);
			spec = new X509EncodedKeySpec(pub_key_bs);
			kfac = KeyFactory.getInstance(&quot;RSA&quot;);//RSA/ECB/PKCS1Padding
			//KeyFactory kfac = KeyFactory.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;);
			public_key = (RSAPublicKey) kfac.generatePublic(spec);
			public_file_in.close();
			public_file_in = null;
			kfac = null;
			spec = null;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (null != public_file_in) {
				public_file_in.close();
				public_file_in = null;
			}
			kfac = null;
			spec = null;
		}

		return public_key;
	}

	public static void main(String[] args){    
		RSAEncrypt rsaEncrypt= new RSAEncrypt();    

		String pubkeyPath = &quot;keysUnreg/pub/QMLogin.pub&quot;;
		String priKeyPath = &quot;keysUnreg/pri/QMLogin.pri&quot;;

		try {
			rsaEncrypt.readX509PublicKey(pubkeyPath);
			rsaEncrypt.readPKCS8PrivateKey(priKeyPath);

		} catch (Exception e1) {
			e1.printStackTrace();
		}
	
		//加载公钥    
		try {    


			RSAPublicKey publickey = rsaEncrypt.getPublicKey();
			System.out.println(&quot;加载公钥成功&quot;);    


			BigInteger moduls = publickey.getModulus();
			BigInteger exponent = publickey.getPublicExponent();

			BASE64Encoder encoder = new BASE64Encoder();
			String modulsStr = encoder.encode(moduls.toByteArray());
			String exponentStr = encoder.encode(exponent.toByteArray());
			System.out.println(&quot;public key moduls:&quot;);
			System.out.println(modulsStr);
			System.out.println(&quot;Public Key:&quot;);
			System.out.println(encoder.encode(publickey.getEncoded()));

		} catch (Exception e) {    
			System.err.println(e.getMessage());    
			System.err.println(&quot;加载公钥失败&quot;);    
		}    

	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过以上程序得到的公私钥,是一串BASE64编码过的字符串,类似如下:&lt;/p&gt;

&lt;p&gt;公钥内容:&lt;/p&gt;

&lt;p&gt;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCYD6I0/PkUGiB03ZdQrBUXhuL4vhBQB/k8DzcB
8GN8ww7kMChAv5nEKxVHLsx11Md5nGHD2gcoZCKyKobXO3+3zD+zv5g4gBNzduw8Xh9Oxlj+2Waz
Vcl20fSI1HI/RY+OlAA8B/wrSBDDU/9LCAGZVBN83RcUHruL5TXfwrnStQIDAQAB&lt;/p&gt;

&lt;p&gt;私钥内容:&lt;/p&gt;

&lt;p&gt;MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAJgPojT8+RQaIHTdl1CsFReG4vi+
EFAH+TwPNwHwY3zDDuQwKEC/mcQrFUcuzHXUx3mcYcPaByhkIrIqhtc7f7fMP7O/mDiAE3N27Dxe
H07GWP7ZZrNVyXbR9IjUcj9Fj46UADwH/CtIEMNT/0sIAZlUE3zdFxQeu4vlNd/CudK1AgMBAAEC
gYB/p5A6/6xyzcQ1l9lx5iUGzTw6KgUzyp3XZ8Z8IDzE/lPACRWh1bfW0XxZd9Y5jVmwpDIG40Bj
Dj16aO0uP0rlydBjxG0tEX8sNs6Z7rPJXm09FZjQHmeRuib1Bgeo5sVCF1EWfF1MssGvfpnGhXl3
Cz5TuFZj+o2/A4gcaP5cuQJBAOB2D18s7q9wWX8kkCsXSoyzh1Qb/s3v1Ye9zQHIbcFU6ZhME0TX
oLi7rqYS1mOutlafYP0iyuSwGj9NUIAngUsCQQCtbVGa2OzakMd4Suvy8R+QusCIMh60/GMzhcFR
dH2OLS8VDqbyC9QpQKcgljra1rHxo0bY2Aps1p/1VI55I3v/AkEAi3CsQfr+2FwaLQMA0NQqStgo
hNbTZwnMBASj+6yQil7+ss7n1YeC3+AwMhlXuBtMSOm/7eGUW5cO5y5XiRWBmwJBAKM/NgOmkj2i
7sCi9bs3kdjwke8iDpmawd5r129PUiiVC66sniVVUR6Lx0X7Y+c/FT05zqSrqBSPav7J21rYNg0C
QCrCGA11+l0XOziD21dHQ4I1HK1kANkGgWNt2KXWD8oL1DcR3/eJ0fEcUbMc/37WAy1Js/Alx07D
/5ch6y2xFcw=&lt;/p&gt;

&lt;h3 id=&quot;iosrsa&quot;&gt;在iOS中使用RSA加密&lt;/h3&gt;

&lt;p&gt;找到了一个不错的开源库:&lt;a href=&quot;https://github.com/lokielse/ios-openssl-rsa-wrapper&quot;&gt;ios-openssl-wrapper&lt;/a&gt;
需要openssl-Universal库的支持,cocoapod:    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod &#39;OpenSSL-Universal&#39;, &#39;~&amp;gt; 1.0.1.l&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要BASE64支持,可选择的开源库有：GTMBase64 &lt;/p&gt;

&lt;p&gt;加密代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+(NSString*)cryptoStringWithRSA:(NSString *)plaintext
{

	QSRSA *qr = [[QSRSA alloc] init];
	//此处公钥需要加上&quot;BEGIN..... END..... 并且每行后加\n换行
	NSString *publicKey = @&quot;-----BEGIN PUBLIC KEY-----\n&quot;
	&quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCYD6I0/PkUGiB03ZdQrBUXhuL4vhBQB/k8DzcB\n&quot;
	&quot;8GN8ww7kMChAv5nEKxVHLsx11Md5nGHD2gcoZCKyKobXO3+3zD+zv5g4gBNzduw8Xh9Oxlj+2Waz\n&quot;
	&quot;Vcl20fSI1HI/RY+OlAA8B/wrSBDDU/9LCAGZVBN83RcUHruL5TXfwrnStQIDAQAB\n&quot;
	&quot;-----END PUBLIC KEY-----&quot;;


	NSData *plainData = [plaintext dataUsingEncoding:NSUTF8StringEncoding];

	//Set Public key
	[qr setPublicKey:publicKey];

	NSString *encryptString = [GTMBase64 stringByEncodingData:[qr encryptDataWithPublicKey:plainData]];
	return encryptString;
}
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Sat, 14 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/03/14/my-encrypto-Implementation.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/03/14/my-encrypto-Implementation.html</guid>
        
        
      </item>
    
      <item>
        <title>imageview中图在ios8中显示正常,在ios7中却无法显示的问题</title>
        <description>&lt;p&gt;在调试一个APP中,发现一个背景图在ios8中可以正常显示,在ios7中却显示不出来&lt;/p&gt;

&lt;p&gt;在此工程中,我把所有的图片放到了images.xcassets中管理,所以怀疑imageSet可能在ios7中不兼容,
但随后又发现了问题不对,因为同样是放到Imageset中得图片,有些在ios7中可以显示的…….&lt;/p&gt;

&lt;p&gt;最后终于查到了之间的差异, 是因为图片格式不同,显示不出图片的是jpg格式.把图片格式改成png格式的,问题解决了.
看来ios8已经兼容了jpg格式了,而ios7还不行.至此问题解决了.&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/03/04/pictureNotDisplayinIOS7.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/03/04/pictureNotDisplayinIOS7.html</guid>
        
        
      </item>
    
      <item>
        <title>我的VIM命令备忘</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;操作技巧&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;重复上一次的编辑命令：.&lt;/li&gt;
  &lt;li&gt;撤销在一行的所有操作：U&lt;/li&gt;
  &lt;li&gt;Vim快速选中、删除、复制引号或括号中的内&lt;/li&gt;
  &lt;li&gt;【操作键c/d/y/v】+ i + 【 ‘/“/(/{/[ 】&lt;/li&gt;
  &lt;li&gt;C+V 进入到块编辑模式，在此模式下可以对纵向的列进行操作&lt;/li&gt;
  &lt;li&gt;快速选中一个段落：vip&lt;/li&gt;
  &lt;li&gt;括号匹配：%&lt;/li&gt;
  &lt;li&gt;往下跳几行：数字+enter&lt;/li&gt;
  &lt;li&gt;单词替换：两部操作：1.yiw-拷贝一个单词 ； 2. viwp-替换到另一个单词&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;光标操作&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;fx：移动光标到当前行的下一个 x 处。很明显，x 可以是任意一个字母，而且你可以使用 ; 来重复你的上一个 f 命令。&lt;/li&gt;
  &lt;li&gt;tx：和上面的命令类似，但是是移动到 x 的左边一个位置。（这真的很有用）&lt;/li&gt;
  &lt;li&gt;Fx：和 fx 类似，不过是往回找。&lt;/li&gt;
  &lt;li&gt;w：光标往前移动一个词。&lt;/li&gt;
  &lt;li&gt;b：光标往后移动一个词。&lt;/li&gt;
  &lt;li&gt;0：移动光标到当前行首。&lt;/li&gt;
  &lt;li&gt;^：移动光标到当前行的第一个字母位置。&lt;/li&gt;
  &lt;li&gt;$：移动光标到行尾。&lt;/li&gt;
  &lt;li&gt;)：移动光标到下一个句子。&lt;/li&gt;
  &lt;li&gt;( ：移动光标到上一个句子。&lt;/li&gt;
  &lt;li&gt;
    &lt;c-f&gt;：向下移动一屏。
&lt;/c-f&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;c-b&gt;：向上移动一屏。
&lt;/c-b&gt;
  &lt;/li&gt;
  &lt;li&gt;G：到文件尾&lt;/li&gt;
  &lt;li&gt;numG：移动光标到指定的行（num）。（比如 10G 就是到第 10 行）&lt;/li&gt;
  &lt;li&gt;gg：到文件首&lt;/li&gt;
  &lt;li&gt;H：移动光标到屏幕上面&lt;/li&gt;
  &lt;li&gt;M：移动光标到屏幕中间&lt;/li&gt;
  &lt;li&gt;L：移动光标到屏幕下面&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;插入操作&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;shift+i:在行首插入&lt;/li&gt;
  &lt;li&gt;shift+a:在行尾插入&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;删除操作&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;删除一个连串非空格字符：dw&lt;/li&gt;
  &lt;li&gt;删除到词尾：de&lt;/li&gt;
  &lt;li&gt;删除当前行：dd&lt;/li&gt;
  &lt;li&gt;删除当前光标到行尾：D&lt;/li&gt;
  &lt;li&gt;全文删除：g g d G&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;代码对齐&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;按 V 选中一些行，然后按 ‘=’ 这些代码就自动对齐了。&lt;/li&gt;
  &lt;li&gt;在符号｛或者符号｝上按=% 对当前｛｝之内的代码进行排版&lt;/li&gt;
  &lt;li&gt;全文代码对齐：g g = G&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vim&quot;&gt;vim标签页的操作&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;:tabnew 新建标签页&lt;/li&gt;
  &lt;li&gt;Ngt   切换标签快捷键&lt;/li&gt;
  &lt;li&gt;:tabc      关闭当前的tab&lt;/li&gt;
  &lt;li&gt;:tabo      关闭所有其他的tab&lt;/li&gt;
  &lt;li&gt;:tabs      查看所有打开的tab&lt;/li&gt;
  &lt;li&gt;:tabp      前一个&lt;/li&gt;
  &lt;li&gt;:tabn      后一个&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;分屏模式下得操作&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;nw 分屏窗口切换&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;xvim&quot;&gt;xvim&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;gd:跳转到头文件此函数的头文件&lt;/li&gt;
  &lt;li&gt;;n : .h和.m相互切换&lt;/li&gt;
  &lt;li&gt;;r : 运行&lt;/li&gt;
  &lt;li&gt;;b : 编译&lt;/li&gt;
  &lt;li&gt;;c : clean&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 21 Feb 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/02/21/vim-note-1.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/02/21/vim-note-1.html</guid>
        
        
      </item>
    
      <item>
        <title>在文件夹右键7zip压缩的方法</title>
        <description>&lt;ul&gt;
  &lt;li&gt;通过brew来安装一个7zip命令&lt;/li&gt;
  &lt;li&gt;打开Automator新建一个service&lt;/li&gt;
  &lt;li&gt;如下图所示添加一个active
&lt;img src=&quot;http://i.imgur.com/Pn8E1gA.png&quot; alt=&quot;image&quot; /&gt;
(完)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 21 Feb 2015 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2015/02/21/7zip-service.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/02/21/7zip-service.html</guid>
        
        
      </item>
    
  </channel>
</rss>
